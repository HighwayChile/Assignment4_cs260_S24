Must use linked list structure that takes a value and adds 
it to a given position in the list (stack).  

Will create a class called Stack, like in the class examples.

I am imagining a design where the stack is checked 
for empty, then if the list is >=1, 
the user may remove an item. Removing is done by taking the 
pointer of the former node and pointing it to the latter node.


the user may insert an item at any time, but if the  
stack_size is >=1, the user needs to choose a value 
as well as a position. This function is kind of the 
"opposite" of the remove function. The user chooses 
a position, and the node before the chosen position will 
have its pointer directed to the new_node, and the new_node 
will point to the node that was formerly in the chosen postion.

Get function should read the value at the address of the node 
which is x many steps from 0 (indeces)

My testing function will create a separate stack class and linked 
list node, then it will perform several operations and print the 
output to the console under clearly labelled outputs. That is 
to say that I plan to create a linked list, populate it, print it 
to the screen, then perform each function at least once on: 
an empty list, 
a list of 1, 
a large list,

I may even try some other tests that involve extreme cases, if 
time allows.




Pseudo for functions and vars:
------------------------------------------

class Stack {
    Node *user_choice;
    int stack_sizesize;

    // the rest of this snippet is copy/pasta 
    public:
        Stack();
        // ~Stack(); // this is the signature of a destructor
        // intend to change these functions to match below
        void insert(int new_node);
        void remove();
        void get();
    // end copy/pasta
};

// instantiate a linked list node pointing at nothing, stack_size begins at zero

Stack::Stack() {
   stack_size = 0;
   user_num = " "; 
   user_choice = nullptr; 
}

// insert node into linked list
// This code needs to check if the list is empty, then
// if not empty, show size of list, possibly show values in list 
// then ask user for position
void Stack::insert() {
    if(stack_size >=1 && user_choice != nullptr) {
        cout << stack_size.value << endl;
        cout << (values of linked list) << endl; // this would need to be in a loop.
        cout << "where put?" << endl;
        if (cin is within allowed range, dictated by stack_size)
            // take node at index[x] and point to new_node using temporary pointer
            // ask for value to insert
            stack_size++;
        else
            // prompt for re-input 
    } else {
        // ask for value to insert (how store value?a variable)
        stack_size++;
    }
}

void remove() {
    // check if list is empty 
    if(stack_size >=1 && user_choice != nullptr) {
        // ask for position
        // take pointer before that index and make it point to the one after the index
    } else {
    cout << "you can't remove, list is empty" << endl;
    }
}


void get() {
    // Check for empty list
    if(stack_size >=1 && user_choice != nullptr) {
        // ask for position
        cout << stack_size[user_num] << endl;
    } else {
    cout << "you can't get, list is empty" << endl;
    }

}


Testing plans:
----------------------------------
how make a test function that is easy to interpret/run?

what we want to show:
---------------------
that a linked list is created
user can choose an input and position
the insert function adds to chosen position
remove function removes from chosen position




Perhaps I will write a separate program that that uses the functions separately and
prints out a list to the console.

Test Pseudocode
----------------------

# include other modules and libraries

# using namespace

First create a linked list

class Stack {
    Node *user_choice;
    int stack_sizesize;

    // the rest of this snippet is copy/pasta 
    public:
        Stack();
        // ~Stack(); // this is the signature of a destructor
        // intend to change these functions to match below
        void insert(int new_node);
        void remove();
        void get();
    // end copy/pasta
};

// instantiate a linked list node
Stack::Stack() {
   stack_size = 0; //list size begins at zero
   user_num = " "; 
   user_choice = nullptr; 
}

// I would populate this list with either strings or ints or both
// then I would use each function to carry out the operations
// described above. This entails assigning variables at the 
// beginning of the test module, then using them as magic numbers.
// could even use true magic numbers. It's only a test module, 
// after all! Magic!

